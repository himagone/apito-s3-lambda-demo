{
  "/Users/user/Documents/git/apito-s3-lambda-demo": {
    "versionSfCore": null,
    "versionFramework": "4.2.5",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "opt": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "my-external-api-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "stage": "dev",
              "region": "ap-northeast-1",
              "environment": {
                "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                "FIWARE_SERVICE": "smartcity_yaizu",
                "API_KEY": "<REDACTED>",
                "S3_BUCKET": "smartcity-yaizu-test",
                "TZ": "Asia/Tokyo"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                }
              ],
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "CallExternalApiLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/my-external-api-service-dev-callExternalApi"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "my-external-api-service",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject"
                                ],
                                "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "my-external-api-service",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CallExternalApiLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/my-external-api-service/dev/1725859265756-2024-09-09T05:21:05.756Z/my-external-api-service.zip"
                      },
                      "Handler": "src/apiHandler.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "my-external-api-service-dev-callExternalApi",
                      "MemorySize": 1024,
                      "Timeout": 300,
                      "Environment": {
                        "Variables": {
                          "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                          "FIWARE_SERVICE": "smartcity_yaizu",
                          "API_KEY": "<REDACTED>",
                          "S3_BUCKET": "smartcity-yaizu-test",
                          "TZ": "Asia/Tokyo"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CallExternalApiLogGroup"
                    ]
                  },
                  "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CallExternalApiLambdaFunction"
                      },
                      "CodeSha256": "aufTvbMe0NYo4LjPAExV5lTcFO3xJ06UdE/FGEw0K9c="
                    }
                  },
                  "MyexternalapiservicedevcallExternalApirule1EventBridgeRule": {
                    "Type": "AWS::Events::Rule",
                    "Properties": {
                      "Name": "my-external-api-service-dev-callExternalApi-rule-1",
                      "ScheduleExpression": "rate(5 minutes)",
                      "State": "ENABLED",
                      "Targets": [
                        {
                          "Arn": {
                            "Fn::GetAtt": [
                              "CallExternalApiLambdaFunction",
                              "Arn"
                            ]
                          },
                          "Id": "my-external-api-service-dev-callExternalApi-rule-1-target"
                        }
                      ]
                    }
                  },
                  "CallExternalApiEventBridgeLambdaPermission1": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "Action": "lambda:InvokeFunction",
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CallExternalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Principal": "events.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          ":",
                          [
                            "arn",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "events",
                            {
                              "Ref": "AWS::Region"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            },
                            {
                              "Fn::Join": [
                                "/",
                                [
                                  "rule",
                                  "my-external-api-service-dev-callExternalApi-rule-1"
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CallExternalApiLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-CallExternalApiLambdaFunctionQualifiedArn"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "callExternalApi": {
                "handler": "src/apiHandler.handler",
                "events": [
                  {
                    "eventBridge": {
                      "schedule": "rate(5 minutes)",
                      "enabled": true
                    }
                  }
                ],
                "timeout": 300,
                "name": "my-external-api-service-dev-callExternalApi",
                "package": {},
                "memory": 1024,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
              }
            }
          },
          "configFileDirPath": "/Users/user/Documents/git/apito-s3-lambda-demo",
          "config": {
            "type": "opt"
          },
          "options": {},
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "default-aws-credential-resolver": "<REDACTED>",
      "file": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "my-external-api-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "stage": "dev",
              "region": "ap-northeast-1",
              "environment": {
                "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                "FIWARE_SERVICE": "smartcity_yaizu",
                "API_KEY": "<REDACTED>",
                "S3_BUCKET": "smartcity-yaizu-test",
                "TZ": "Asia/Tokyo"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                }
              ],
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "CallExternalApiLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/my-external-api-service-dev-callExternalApi"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "my-external-api-service",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject"
                                ],
                                "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "my-external-api-service",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CallExternalApiLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/my-external-api-service/dev/1725859265756-2024-09-09T05:21:05.756Z/my-external-api-service.zip"
                      },
                      "Handler": "src/apiHandler.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "my-external-api-service-dev-callExternalApi",
                      "MemorySize": 1024,
                      "Timeout": 300,
                      "Environment": {
                        "Variables": {
                          "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                          "FIWARE_SERVICE": "smartcity_yaizu",
                          "API_KEY": "<REDACTED>",
                          "S3_BUCKET": "smartcity-yaizu-test",
                          "TZ": "Asia/Tokyo"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CallExternalApiLogGroup"
                    ]
                  },
                  "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CallExternalApiLambdaFunction"
                      },
                      "CodeSha256": "aufTvbMe0NYo4LjPAExV5lTcFO3xJ06UdE/FGEw0K9c="
                    }
                  },
                  "MyexternalapiservicedevcallExternalApirule1EventBridgeRule": {
                    "Type": "AWS::Events::Rule",
                    "Properties": {
                      "Name": "my-external-api-service-dev-callExternalApi-rule-1",
                      "ScheduleExpression": "rate(5 minutes)",
                      "State": "ENABLED",
                      "Targets": [
                        {
                          "Arn": {
                            "Fn::GetAtt": [
                              "CallExternalApiLambdaFunction",
                              "Arn"
                            ]
                          },
                          "Id": "my-external-api-service-dev-callExternalApi-rule-1-target"
                        }
                      ]
                    }
                  },
                  "CallExternalApiEventBridgeLambdaPermission1": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "Action": "lambda:InvokeFunction",
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CallExternalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Principal": "events.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          ":",
                          [
                            "arn",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "events",
                            {
                              "Ref": "AWS::Region"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            },
                            {
                              "Fn::Join": [
                                "/",
                                [
                                  "rule",
                                  "my-external-api-service-dev-callExternalApi-rule-1"
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CallExternalApiLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-CallExternalApiLambdaFunctionQualifiedArn"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "callExternalApi": {
                "handler": "src/apiHandler.handler",
                "events": [
                  {
                    "eventBridge": {
                      "schedule": "rate(5 minutes)",
                      "enabled": true
                    }
                  }
                ],
                "timeout": 300,
                "name": "my-external-api-service-dev-callExternalApi",
                "package": {},
                "memory": 1024,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
              }
            }
          },
          "configFileDirPath": "/Users/user/Documents/git/apito-s3-lambda-demo",
          "config": {
            "type": "file"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      },
      "self": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "my-external-api-service",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "stage": "dev",
              "region": "ap-northeast-1",
              "environment": {
                "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                "FIWARE_SERVICE": "smartcity_yaizu",
                "API_KEY": "<REDACTED>",
                "S3_BUCKET": "smartcity-yaizu-test",
                "TZ": "Asia/Tokyo"
              },
              "iamRoleStatements": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                }
              ],
              "versionFunctions": true,
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "CallExternalApiLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/my-external-api-service-dev-callExternalApi"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "my-external-api-service",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject"
                                ],
                                "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "my-external-api-service",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "CallExternalApiLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "S3Key": "serverless/my-external-api-service/dev/1725859265756-2024-09-09T05:21:05.756Z/my-external-api-service.zip"
                      },
                      "Handler": "src/apiHandler.handler",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "my-external-api-service-dev-callExternalApi",
                      "MemorySize": 1024,
                      "Timeout": 300,
                      "Environment": {
                        "Variables": {
                          "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                          "FIWARE_SERVICE": "smartcity_yaizu",
                          "API_KEY": "<REDACTED>",
                          "S3_BUCKET": "smartcity-yaizu-test",
                          "TZ": "Asia/Tokyo"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CallExternalApiLogGroup"
                    ]
                  },
                  "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CallExternalApiLambdaFunction"
                      },
                      "CodeSha256": "aufTvbMe0NYo4LjPAExV5lTcFO3xJ06UdE/FGEw0K9c="
                    }
                  },
                  "MyexternalapiservicedevcallExternalApirule1EventBridgeRule": {
                    "Type": "AWS::Events::Rule",
                    "Properties": {
                      "Name": "my-external-api-service-dev-callExternalApi-rule-1",
                      "ScheduleExpression": "rate(5 minutes)",
                      "State": "ENABLED",
                      "Targets": [
                        {
                          "Arn": {
                            "Fn::GetAtt": [
                              "CallExternalApiLambdaFunction",
                              "Arn"
                            ]
                          },
                          "Id": "my-external-api-service-dev-callExternalApi-rule-1-target"
                        }
                      ]
                    }
                  },
                  "CallExternalApiEventBridgeLambdaPermission1": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "Action": "lambda:InvokeFunction",
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CallExternalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Principal": "events.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          ":",
                          [
                            "arn",
                            {
                              "Ref": "AWS::Partition"
                            },
                            "events",
                            {
                              "Ref": "AWS::Region"
                            },
                            {
                              "Ref": "AWS::AccountId"
                            },
                            {
                              "Fn::Join": [
                                "/",
                                [
                                  "rule",
                                  "my-external-api-service-dev-callExternalApi-rule-1"
                                ]
                              ]
                            }
                          ]
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "CallExternalApiLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
                    },
                    "Export": {
                      "Name": "sls-my-external-api-service-dev-CallExternalApiLambdaFunctionQualifiedArn"
                    }
                  }
                }
              },
              "coreCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "ServerlessDeploymentBucket": {
                    "Type": "AWS::S3::Bucket",
                    "Properties": {
                      "BucketEncryption": {
                        "ServerSideEncryptionConfiguration": [
                          {
                            "ServerSideEncryptionByDefault": {
                              "SSEAlgorithm": "AES256"
                            }
                          }
                        ]
                      }
                    }
                  },
                  "ServerlessDeploymentBucketPolicy": {
                    "Type": "AWS::S3::BucketPolicy",
                    "Properties": {
                      "Bucket": {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "PolicyDocument": {
                        "Statement": [
                          {
                            "Action": "s3:*",
                            "Effect": "Deny",
                            "Principal": "*",
                            "Resource": [
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    },
                                    "/*"
                                  ]
                                ]
                              },
                              {
                                "Fn::Join": [
                                  "",
                                  [
                                    "arn:",
                                    {
                                      "Ref": "AWS::Partition"
                                    },
                                    ":s3:::",
                                    {
                                      "Ref": "ServerlessDeploymentBucket"
                                    }
                                  ]
                                ]
                              }
                            ],
                            "Condition": {
                              "Bool": {
                                "aws:SecureTransport": false
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "callExternalApi": {
                "handler": "src/apiHandler.handler",
                "events": [
                  {
                    "eventBridge": {
                      "schedule": "rate(5 minutes)",
                      "enabled": true
                    }
                  }
                ],
                "timeout": 300,
                "name": "my-external-api-service-dev-callExternalApi",
                "package": {},
                "memory": 1024,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
              }
            }
          },
          "configFileDirPath": "/Users/user/Documents/git/apito-s3-lambda-demo",
          "config": {
            "type": "self"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "/Users/user/Documents/git/apito-s3-lambda-demo",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "my-external-api-service",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "stage": "dev",
        "region": "ap-northeast-1",
        "environment": {
          "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
          "FIWARE_SERVICE": "smartcity_yaizu",
          "API_KEY": "<REDACTED>",
          "S3_BUCKET": "smartcity-yaizu-test",
          "TZ": "Asia/Tokyo"
        },
        "iamRoleStatements": [
          {
            "Effect": "Allow",
            "Action": [
              "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
          }
        ],
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "CallExternalApiLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/my-external-api-service-dev-callExternalApi"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "my-external-api-service",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/my-external-api-service-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "s3:PutObject"
                          ],
                          "Resource": "arn:aws:s3:::smartcity-yaizu-test/*"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "my-external-api-service",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CallExternalApiLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/my-external-api-service/dev/1725859265756-2024-09-09T05:21:05.756Z/my-external-api-service.zip"
                },
                "Handler": "src/apiHandler.handler",
                "Runtime": "nodejs18.x",
                "FunctionName": "my-external-api-service-dev-callExternalApi",
                "MemorySize": 1024,
                "Timeout": 300,
                "Environment": {
                  "Variables": {
                    "EXTERNAL_API_URL": "https://api.smartcity-yaizu.jp/v2/entities/",
                    "FIWARE_SERVICE": "smartcity_yaizu",
                    "API_KEY": "<REDACTED>",
                    "S3_BUCKET": "smartcity-yaizu-test",
                    "TZ": "Asia/Tokyo"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CallExternalApiLogGroup"
              ]
            },
            "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CallExternalApiLambdaFunction"
                },
                "CodeSha256": "aufTvbMe0NYo4LjPAExV5lTcFO3xJ06UdE/FGEw0K9c="
              }
            },
            "MyexternalapiservicedevcallExternalApirule1EventBridgeRule": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "Name": "my-external-api-service-dev-callExternalApi-rule-1",
                "ScheduleExpression": "rate(5 minutes)",
                "State": "ENABLED",
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "CallExternalApiLambdaFunction",
                        "Arn"
                      ]
                    },
                    "Id": "my-external-api-service-dev-callExternalApi-rule-1-target"
                  }
                ]
              }
            },
            "CallExternalApiEventBridgeLambdaPermission1": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CallExternalApiLambdaFunction",
                    "Arn"
                  ]
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    ":",
                    [
                      "arn",
                      {
                        "Ref": "AWS::Partition"
                      },
                      "events",
                      {
                        "Ref": "AWS::Region"
                      },
                      {
                        "Ref": "AWS::AccountId"
                      },
                      {
                        "Fn::Join": [
                          "/",
                          [
                            "rule",
                            "my-external-api-service-dev-callExternalApi-rule-1"
                          ]
                        ]
                      }
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-my-external-api-service-dev-ServerlessDeploymentBucketName"
              }
            },
            "CallExternalApiLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
              },
              "Export": {
                "Name": "sls-my-external-api-service-dev-CallExternalApiLambdaFunctionQualifiedArn"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "callExternalApi": {
          "handler": "src/apiHandler.handler",
          "events": [
            {
              "eventBridge": {
                "schedule": "rate(5 minutes)",
                "enabled": true
              }
            }
          ],
          "timeout": 300,
          "name": "my-external-api-service-dev-callExternalApi",
          "package": {},
          "memory": 1024,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CallExternalApiLambdaVersion0C6hTlJdDA0hq8BKcxhVfKnXHBxnczJVglJZcEU"
        }
      }
    },
    "serviceRawFile": "service: my-external-api-service\n\nprovider:\n  name: aws\n  runtime: nodejs18.x\n  stage: ${opt:stage, 'dev'}\n  region: ap-northeast-1\n  environment:\n    EXTERNAL_API_URL: ${file(./config/${self:provider.stage}.json):EXTERNAL_API_URL}\n    FIWARE_SERVICE: ${file(./config/${self:provider.stage}.json):FIWARE_SERVICE}\n    API_KEY: ${file(./config/${self:provider.stage}.json):API_KEY}\n    S3_BUCKET: ${file(./config/${self:provider.stage}.json):S3_BUCKET}\n    TZ: Asia/Tokyo\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - s3:PutObject\n      Resource: arn:aws:s3:::${file(./config/${self:provider.stage}.json):S3_BUCKET}/*\n\n\nfunctions:\n  callExternalApi:\n    handler: src/apiHandler.handler\n    events:\n      - eventBridge:\n          schedule: rate(5 minutes)\n          enabled: true\n    timeout: 300\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": {
      "message": "The security token included in the request is expired",
      "stack": "ExpiredToken: The security token included in the request is expired\n    at throwDefaultError (file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:88:7944)\n    at file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:88:8218\n    at de_CommandError (file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:136:33153)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:77:25124\n    at async file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:78:11773\n    at async file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:88:26618\n    at async file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:76:20563\n    at async resolveAccountId (file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:148:991466)\n    at async getAwsCredentialProvider (file:///Users/user/.serverless/releases/4.2.5/package/dist/sf-core.js:210:455768)"
    },
    "params": {},
    "machineId": "81142fc0df7b05223b30508b82362742",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "2164d2a3-7ca1-4e3a-8d11-bd3de6069d9d",
    "orgName": "himagone",
    "userId": "HP1L7GFtqjZ2CxYHT8",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "himagone",
    "subscription": null,
    "userEmail": "sunfgirl1975@icloud.com",
    "projectType": "framework",
    "versionSf": "4.2.5",
    "serviceProviderAwsCfStackName": "my-external-api-service-dev",
    "serviceProviderAwsCfStackId": null,
    "serviceProviderAwsCfStackCreated": null,
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": null,
    "serviceProviderAwsCfStackOutputs": null
  }
}